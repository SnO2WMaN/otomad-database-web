input AddMylistToMylistGroupInput {
  groupId: ID!
  mylistId: ID!
}

type AddMylistToMylistGroupPayload {
  inclusion: MylistGroupMylistInclusion!
}

input AddSemitagToVideoInput {
  name: String!
  videoId: ID!
}

type AddSemitagToVideoPayload {
  semitag: Semitag!
}

input AddTagToVideoInput {
  tagId: ID!
  videoId: ID!
}

type AddTagToVideoPayload {
  tag: Tag!
  video: Video!
}

input AddVideoToMylistInput {
  mylistId: ID!
  note: String
  videoId: ID!
}

type AddVideoToMylistPayload {
  registration: MylistRegistration!
}

input CreateMylistGroupInput {
  title: String!
}

type CreateMylistGroupPayload {
  group: MylistGroup!
}

input CreateMylistInput {
  range: MylistShareRange!
  title: String!
}

type CreateMylistPayload {
  mylist: Mylist!
}

scalar DateTime

input FindMylistInput {
  id: ID
}

input FindNicovideoVideoSourceInput {
  sourceId: String
}

input FindSemitagsInput {
  except: [ID!]! = []
  limit: Int! = 10
  order: FindSemitagsInputOrder! = {updatedAt: DESC}
  resolved: Boolean
  skip: Int! = 0
}

input FindSemitagsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FindTagsInput {
  limit: Int! = 10

  """正確に一致"""
  name: String
  order: FindTagsInputOrder! = {updatedAt: DESC}
  parents: [ID!]
  skip: Int! = 0
}

input FindTagsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

input FindUserInput {
  name: String
}

input FindVideoInput {
  id: ID
  serial: Int
}

input FindVideosInput {
  limit: Int! = 10
  order: FindVideosInputOrder! = {createdAt: DESC}
  skip: Int! = 0
}

input FindVideosInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LikeVideoInput {
  videoId: ID!
}

type LikeVideoPayload {
  registration: MylistRegistration!
}

type Mutation {
  addMylistToMylistGroup(input: AddMylistToMylistGroupInput!): AddMylistToMylistGroupPayload!
  addSemitagToVideo(input: AddSemitagToVideoInput!): AddSemitagToVideoPayload!
  addTagToVideo(input: AddTagToVideoInput!): AddTagToVideoPayload!
  addVideoToMylist(input: AddVideoToMylistInput!): AddVideoToMylistPayload!
  createMylist(input: CreateMylistInput!): CreateMylistPayload!
  createMylistGroup(input: CreateMylistGroupInput!): CreateMylistGroupPayload!
  likeVideo(input: LikeVideoInput!): LikeVideoPayload!
  registerTag(input: RegisterTagInput!): RegisterTagPayload!
  registerVideo(input: RegisterVideoInput!): RegisterVideoPayload!
  removeTagFromVideo(input: RemoveTagFromVideoInput!): RemoveTagFromVideoPayload!
  removeVideoFromMylist(input: RemoveVideoFromMylistInput!): RemoveVideoFromMylistPayload!
  resovleSemitag(input: ResolveSemitagInput!): ResolveSemitagPayload!
  undoLikeVideo(input: UndoLikeVideoInput!): UndoLikeVideoPayload!
}

type Mylist implements Node {
  createdAt: DateTime!
  holder: User!
  id: ID!
  includeTags(input: MylistIncludeTagsInput!): MylistIncludeTagsPayload!

  """マイリストの中にビデオが追加されているか．"""
  isIncludesVideo(id: ID!): Boolean!
  isLikeList: Boolean!
  range: MylistShareRange!
  recommendedVideos(input: MylistRecommendedVideosInput!): MylistRecommendedVideosPayload!
  registrations(input: MylistRegistrationsInput!): MylistRegistrationConnection!
  title: String!
  updatedAt: DateTime!
}

type MylistConnection {
  nodes: [Mylist!]!
}

type MylistGroup implements Node {
  createdAt: DateTime!
  holder: User!
  id: ID!
  mylists(input: MylistGroupMylistsInput!): MylistGroupMylistInclusionConnection!
  title: String!
  updatedAt: DateTime!
  videos(input: MylistGroupVideosInput!): [MylistGroupVideoAggregation!]!
}

type MylistGroupMylistInclusion implements Node {
  createdAt: DateTime!
  group: MylistGroup!
  id: ID!
  mylist: Mylist!
  updatedAt: DateTime!
}

type MylistGroupMylistInclusionConnection {
  nodes: [MylistGroupMylistInclusion!]!
}

input MylistGroupMylistsInput {
  limit: Int! = 10
  order: MylistGroupMylistsInputOrder! = {createdAt: DESC}
  skip: Int! = 0
}

input MylistGroupMylistsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type MylistGroupVideoAggregation {
  """動画を含んでいるマイリストの数"""
  count: Int!

  """動画を含んでいるマイリスト"""
  mylists(input: MylistGroupVideoAggregationMylistsInput!): [Mylist!]!
  video: Video!
}

input MylistGroupVideoAggregationMylistsInput {
  limit: Int! = 10
  order: MylistGroupVideoAggregationMylistsInputOrder! = {createdAt: DESC}
  skip: Int! = 0
}

input MylistGroupVideoAggregationMylistsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

input MylistGroupVideosInput {
  limit: Int! = 10
  order: MylistGroupVideosInputOrder! = {count: DESC}
  skip: Int! = 0
}

input MylistGroupVideosInputOrder {
  count: SortOrder!
}

input MylistIncludeTagsInput {
  limit: Int! = 10
  order: MylistIncludeTagsInputOrder! = {count: DESC}
  skip: Int! = 0
}

input MylistIncludeTagsInputOrder {
  count: SortOrder!
}

type MylistIncludeTagsPayload {
  items: [MylistTagInclusion!]!
}

input MylistRecommendedVideosInput {
  limit: Int! = 10
}

type MylistRecommendedVideosPayload {
  items: [MylistVideoRecommendation!]!
}

type MylistRegistration implements Node {
  createdAt: DateTime!
  id: ID!
  mylist: Mylist!
  note: String
  updatedAt: DateTime!
  video: Video!
}

type MylistRegistrationConnection {
  nodes: [MylistRegistration!]!
}

input MylistRegistrationsInput {
  limit: Int! = 10
  order: MylistRegistrationsInputOrder! = {}
  skip: Int! = 0
}

input MylistRegistrationsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

enum MylistShareRange {
  KNOW_LINK
  PRIVATE
  PUBLIC
}

type MylistTagInclusion {
  count: Int!
  mylist: Mylist!
  tag: Tag!
}

type MylistVideoRecommendation {
  origin: Mylist!
  score: Float!
  to: Video!
}

type NicovideoVideoSource implements Node & VideoSource {
  id: ID!
  sourceId: String!
  url: String!
  video: Video!
}

interface Node {
  id: ID!
}

enum PseudoTagType {
  """キャラクター"""
  CHARACTER

  """動画の内容に依らない情報，分類など"""
  CLASS

  """作品名"""
  COPYRIGHT

  """合作などのイベント"""
  EVENT

  """曲"""
  MUSIC

  """特徴的なセリフなど"""
  PHRASE

  """シリーズ"""
  SERIES

  """動画そのものに対しての性質，作風など"""
  STYLE

  """2つ以上のタイプが算出された場合"""
  SUBTLE

  """戦法"""
  TACTICS

  """タイプを算出できなかった場合"""
  UNKNOWN
}

type Query {
  findMylist(input: FindMylistInput!): Mylist
  findNicovideoVideoSource(input: FindNicovideoVideoSourceInput!): NicovideoVideoSource
  findSemitags(input: FindSemitagsInput!): SemitagConnection!
  findTags(input: FindTagsInput!): TagConnection!
  findUser(input: FindUserInput!): User
  findVideo(input: FindVideoInput!): Video
  findVideos(input: FindVideosInput!): VideoConnection!
  mylist(id: ID!): Mylist!
  mylistGroup(id: ID!): MylistGroup!
  nicovideoVideoSource(id: ID!): NicovideoVideoSource!
  searchTags(input: SearchTagInput!): SearchTagsPayload!
  searchVideos(input: SearchVideoInput!): SearchVideosPayload!
  semitag(id: ID!): Semitag!
  tag(id: ID!): Tag!
  user(id: ID!): User!
  video(id: ID!): Video!
  whoami: User
}

input RegisterTagInput {
  explicitParent: ID
  extraNames: [String!]! = []
  implicitParents: [ID!]! = []
  meaningless: Boolean! = false
  primaryName: String!
  resolveSemitags: [ID!]! = []
}

type RegisterTagPayload {
  tag: Tag!
}

input RegisterVideoInput {
  extraTitles: [String!]! = []
  primaryThumbnail: String!
  primaryTitle: String!
  semitags: [String!]! = []
  sources: [RegisterVideoInputSource!]!
  tags: [ID!]!
}

input RegisterVideoInputSource {
  sourceId: String!
  type: RegisterVideoInputSourceType!
}

enum RegisterVideoInputSourceType {
  NICOVIDEO
}

type RegisterVideoPayload {
  video: Video!
}

input RemoveTagFromVideoInput {
  tagId: ID!
  videoId: ID!
}

type RemoveTagFromVideoPayload {
  tag: Tag!
  video: Video!
}

input RemoveVideoFromMylistInput {
  mylistId: ID!
  videoId: ID!
}

type RemoveVideoFromMylistPayload {
  mylist: Mylist!
  video: Video!
}

input ResolveSemitagInput {
  id: ID!
  tagId: ID
}

type ResolveSemitagPayload {
  semitag: Semitag!
}

input SearchTagInput {
  limit: Int! = 10
  query: String!
  skip: Int! = 0
}

type SearchTagsItem {
  matchedName: String!
  tag: Tag!
}

type SearchTagsPayload {
  items: [SearchTagsItem!]!
}

input SearchVideoInput {
  limit: Int! = 10
  query: String!
  skip: Int! = 0
}

type SearchVideosItem {
  matchedTitle: String!
  video: Video!
}

type SearchVideosPayload {
  items: [SearchVideosItem!]!
}

type Semitag implements Node {
  id: ID!
  name: String!
  resolved: Boolean!
  resolvedTag: Tag
  video: Video!
}

type SemitagConnection {
  nodes: [Semitag!]!
}

enum SortOrder {
  ASC
  DESC
}

type Tag implements Node {
  """動画に対してタグを付けることができるか"""
  canTagTo(
    """動画のID"""
    videoId: ID!
  ): Boolean!
  explicitParent: Tag
  history(input: TagHistoryInput!): TagHistoryConnection!
  id: ID!
  meaningless: Boolean!
  name: String!
  names: [TagName!]!
  parents(meaningless: Boolean): [TagParent!]!
  pseudoType: PseudoTagType!
  taggedVideos: [Video!]!
  type: TagType! @deprecated
}

type TagAddNameHistoryItem implements TagHistoryItem {
  createdAt: DateTime!
  id: ID!
  name: String!
  tag: Tag!
  user: User!
}

type TagChangePrimaryNameHistoryItem implements TagHistoryItem {
  createdAt: DateTime!
  from: String
  id: ID!
  tag: Tag!
  to: String!
  user: User!
}

type TagConnection {
  nodes: [Tag!]!
}

type TagDeleteNameHistoryItem implements TagHistoryItem {
  createdAt: DateTime!
  id: ID!
  name: String!
  tag: Tag!
  user: User!
}

type TagHistoryConnection {
  nodes: [VideoHistoryItem!]!
}

input TagHistoryInput {
  limit: Int! = 10
  order: TagHistoryOrder! = {createdAt: DESC}
  skip: Int! = 0
}

interface TagHistoryItem {
  createdAt: DateTime!
  id: ID!
  user: User!
}

input TagHistoryOrder {
  createdAt: SortOrder
}

type TagName {
  name: String!
  primary: Boolean!
}

type TagParent {
  explicit: Boolean!
  tag: Tag!
}

type TagRegisterHistoryItem implements TagHistoryItem {
  createdAt: DateTime!
  id: ID!
  tag: Tag!
  user: User!
}

enum TagType {
  CLASS
  COPYRIGHT
  EVENT
  IMAGE
  MATERIAL
  MUSIC
  SERIES
  TACTICS
}

input UndoLikeVideoInput {
  videoId: ID!
}

type UndoLikeVideoPayload {
  mylist: Mylist!
  video: Video!
}

type User implements Node {
  displayName: String!
  icon: String
  id: ID!
  isAdministrator: Boolean!
  isEditor: Boolean!
  likes: Mylist
  mylist(id: ID!): Mylist
  mylists(input: UserMylistsInput!): MylistConnection!
  name: String!
}

input UserMylistsInput {
  limit: Int! = 10
  order: UserMylistsInputOrder! = {createdAt: ASC}
  range: [MylistShareRange!]! = [PUBLIC]
  skip: Int! = 0
}

input UserMylistsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type Video implements Node {
  hasTag(id: ID!): Boolean!
  history(input: VideoHistoryInput!): VideoHistoryConnection!
  id: ID!
  nicovideoSources: [NicovideoVideoSource!]!
  registeredAt: DateTime!
  semitags(resolved: Boolean): [Semitag!]!
  serial: Int!
  similarVideos(input: VideoSimilarVideosInput!): VideoSimilarVideosPayload!
  tags(input: VideoTagsInput!): [Tag!]!
  thumbnailUrl: String!
  thumbnails: [VideoThumbnail!]!
  title: String!
  titles: [VideoTitle!]!
}

type VideoAddNicovideoVideoSourceHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  source: NicovideoVideoSource!
  user: User!
  video: Video!
}

type VideoAddTagHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  tag: Tag!
  user: User!
  video: Video!
}

type VideoAddThumbnailHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  thumbnail: String!
  user: User!
  video: Video!
}

type VideoAddTitleHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  title: String!
  user: User!
  video: Video!
}

type VideoChangePrimaryThumbnailHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  from: String
  id: ID!
  to: String!
  user: User!
  video: Video!
}

type VideoChangePrimaryTitleHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  from: String
  id: ID!
  to: String!
  user: User!
  video: Video!
}

type VideoConnection {
  nodes: [Video!]!
}

type VideoDeleteTagHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  tag: Tag!
  user: User!
  video: Video!
}

type VideoDeleteThumbnailHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  thumbnail: String!
  user: User!
  video: Video!
}

type VideoDeleteTitleHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  title: String!
  user: User!
  video: Video!
}

type VideoHistoryConnection {
  nodes: [VideoHistoryItem!]!
}

input VideoHistoryInput {
  limit: Int! = 10
  order: VideoHistoryOrder! = {createdAt: DESC}
  skip: Int! = 0
}

interface VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  user: User!
  video: Video!
}

input VideoHistoryOrder {
  createdAt: SortOrder
}

type VideoRegisterHistoryItem implements VideoHistoryItem {
  createdAt: DateTime!
  id: ID!
  user: User!
  video: Video!
}

input VideoSimilarVideosInput {
  limit: Int! = 10
}

type VideoSimilarVideosPayload {
  items: [VideoSimilarity!]!
}

type VideoSimilarity {
  origin: Video!
  score: Float!
  to: Video!
}

interface VideoSource {
  id: ID!
  sourceId: String!
  url: String!
  video: Video!
}

input VideoTagsInput {
  """未指定なら全てを取得する"""
  limit: Int
  order: VideoTagsInputOrder! = {updatedAt: DESC}
  skip: Int! = 0
}

input VideoTagsInputOrder {
  createdAt: SortOrder
  updatedAt: SortOrder
}

type VideoThumbnail {
  imageUrl: String!
  primary: Boolean!
}

type VideoTitle {
  primary: Boolean!
  title: String!
}

type YoutubeVideoSource implements Node & VideoSource {
  id: ID!
  sourceId: String!
  url: String!
  video: Video!
}